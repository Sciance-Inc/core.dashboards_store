name: Run the Nightly Build

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    branches:
      - develop

env:
  REGISTRY: ghcr.io
  REPOSITORY_NAME: ${{ github.repository }}

jobs:
  build_nightly:
    runs-on: [self-hosted, maas]
    strategy:
      fail-fast: false # if one matrix fails, continue with the others
      max-parallel: 1
      matrix:
        configs:
          - branch: master
            tag: stable
            target: stable
          - branch: develop
            tag: dev
            target: dev

    steps:
      # Clone the repo
      - name: Checkout the latest release
        uses: actions/checkout@v3
        with:
          ref: ${{ matrix.configs.branch }}
          token: ${{ secrets.CICD_PAT_TOKEN }}

      # Log into the Github container registry
      - name: Log into the Github container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CICD_PAT_TOKEN }}

      # Prepare build(x) by adding the SSH key to download the core relase
      - name: Adding the SSH key to the agent
        uses: MrSquaare/ssh-setup-action@v2
        with:
          host: github.com
          private-key: ${{ secrets.SSH_PRIVATE_KEY_GH_ACCESS }}

      - name: Configure the Builder
        uses: docker/setup-buildx-action@v2

      - name: Build the docker image's tag
        id: docker-tag
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY_NAME }}
          tags: nightly-${{ matrix.configs.tag }}

      # Build the nightly version
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.docker-tag.outputs.tags }}
          context: .
          file: tooling/nightly/docker/Dockerfile
          pull: true
          build-args: |
            CORE_VERSION=${{ matrix.configs.branch }}
            TARGET=${{ matrix.configs.target }}
          ssh: |
            default=${{ env.SSH_AUTH_SOCK }}

      # Fetch the credential to be used against the integration database
      - name: Extract the credential to use for the DBT connection
        uses: mcmarkj/1password-actions@v2
        id: creds
        with:
          connect-server-url: http://op-connect-api:8080
          connect-server-token: ${{ secrets.ONEPASSWORD_CONNECT_API_TOKEN }}
          secret-path: |
            store > nightly | creds

      # Inject the credential into the env file later use by docker
      - name: Create Docker env file
        run: |
          touch env
          echo DBT_USERNAME=${{steps.creds.outputs.creds_username}} >> env
          echo DBT_PASSWORD=${{steps.creds.outputs.creds_password}} >> env
          echo DBT_SERVER=${{steps.creds.outputs.creds_server}} >> env
          echo DBT_PORT=${{steps.creds.outputs.creds_port}} >> env

      # Continuous Integration
      - name: Run the integration tests suite
        run: |
          docker run --env-file env --pull always ${{ steps.docker-tag.outputs.tags }} integration

      # Knock knock ! Who's there ? The broken build !
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: failure()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
